* General
** Basic Variables
#+begin_src elisp
(setq user-full-name "Owen Lynch"
      user-mail-address "root@owenlynch.org")

(setq doom-font (font-spec :family "monospace" :size 14))

(setq doom-theme 'doom-one)

(setq org-directory "~/d/org/")

(setq display-line-numbers-type t)

(set-frame-parameter (selected-frame) 'alpha '(85 . 85))
(add-to-list 'default-frame-alist '(alpha . (85 . 85)))

(setq auth-sources '("~/.authinfo"))
#+end_src
** Convenience Remaps
#+begin_src elisp
(map! :leader
      "SPC" 'counsel-M-x
      "p /" '+ivy/project-search)
#+end_src
** Font/Appearance
#+begin_src elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 14)
      doom-variable-pitch-font (font-spec :family "Fira Sans")
      doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 19))
#+end_src
* Domains
** Dotfiles
#+begin_src elisp
(defun +dotfiles/commit ()
  (interactive)
  (async-shell-command "commit-dotfiles"))

(map! :leader
      "d c" #'+dotfiles/commit)
#+end_src
** Nix
#+begin_src elisp
(defun +nix/home-manager-switch ()
  (interactive)
  (async-shell-command "home-manager switch"))

(defun +nix/nixos-rebuild-switch ()
  (interactive)
  (async-shell-command "sudo nixos-rebuild switch"))

(map! :leader
      "h r h" #'+nix/home-manager-switch
      "h r n" #'+nix/nixos-rebuild-switch)

(set-popup-rules!
  '(("^\\*Async" :slot -1 :modeline f)))
#+end_src
** Doom
#+begin_src elisp
(map! :leader
      "h r r" 'doom/reload)
#+end_src
** Python
#+begin_src elisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
#+end_src
** Julia
#+begin_src elisp
(setq-default julia-indent-offset 2)
#+end_src
** Nov
#+begin_src elisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
#+end_src
** Markdown
#+begin_src elisp
;; (add-hook! markdown-mode
;;   (setq markdown-enable-math 'f))
#+end_src

** LaTeX

#+begin_src elisp
(add-hook! LaTeX-mode
  (setq TeX-engine 'luatex))

(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
#+end_src

** Org
#+begin_src elisp
(defun org-insert-clipboard-image (&optional file)
  (interactive "F")
  (shell-command (concat "wl-paste > " file))
  (insert (concat "[[" file "]]"))
  (org-display-inline-images))

(setq org-agenda-skip-function-global '(org-agenda-skip-entry-if 'todo 'done))
#+end_src

** Jupyter
#+begin_src elisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (julia . t)
   (python . t)
   (jupyter . t)))

(setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                     (:session . "py")
                                                     (:kernel . "python3")
                                                     (:exports . "both")))
#+end_src
** Zig
#+begin_src elisp
;; (require 'lsp)
;; (add-to-list 'lsp-language-id-configuration '(zig-mode . "zig"))
;; (lsp-register-client
;;  (make-lsp-client
;;   :new-connection (lsp-stdio-connection "zig")
;;   :major-modes '(zig-mode)
;;   :server-id 'zls))
#+end_src

** Zoom
#+begin_src elisp
(defun +zoom/open-link ()
  (interactive)
  (shell-command
   (format (concat "chromium '" (browse-url-url-at-point) "' > /dev/null 2>&1 &"))))

(map! :leader
      "o z" '+zoom/open-link)
#+end_src
